import os
import keybordsbot as kb

from aiogram.dispatcher.filters import Command
from aiogram import types
from main import bot, dp
from DataBase_PostgreSQL.main_bd_postgre import execute_contact, checkin_contact
from config import admin_erikk_id, admin_daria_id

# –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É —Å —Ü–µ–Ω–∞–º–∏
path_price = os.path.join(os.getcwd(), 'Price')
photos = [os.path.join(path_price, file) for file in os.listdir(path_price)]


# –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ start –∏ –≤—ã–≤–æ–¥ –∫–Ω–æ–ø–æ–∫
@dp.message_handler(Command("start"))
async def show_menu(message: types.Message):
    await message.answer("–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –º–µ–Ω—é –Ω–∏–∂–µ üëáüèª", reply_markup=kb.menu)


# –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ
@dp.message_handler(text="–û–± –∞–≤—Ç–æ—Ä–µ üë©‚Äçüç≥")
async def get_about(message: types.Message):
    await message.answer("–Ø - –î–∞—Ä—å—è! üë©‚Äçüç≥ –ù–∞—á–∏–Ω–∞—é—â–∏–π –∫–æ–Ω–¥–∏—Ç–µ—Ä!\n"
                         "–°–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π –≤—ã –º–æ–∂–µ—Ç–µ –∑–¥–µ—Å—å üå∏\n", reply_markup=kb.inline_kb_links)


# –í—ã–≤–æ–¥–∏–º –ø—Ä–∏–º–µ—Ä—ã
@dp.message_handler(text="–ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç üßÅ")
async def get_about(message: types.Message):
    await bot.send_photo(message.from_user.id, open('Examples/ch_keks.jpg', 'rb'))
    await message.answer("–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ üëáüèª", reply_markup=kb.inline_kb_represent)


# –í—ã–≤–æ–¥–∏–º –≤—Å–µ —Ñ–∞–π–ª—ã —Å —Ü–µ–Ω–∞–º–∏ (Price)
@dp.message_handler(text="–ü—Ä–∞–π—Å üßæ")
async def get_about(message: types.Message):
    for ph in photos:
        await bot.send_photo(message.from_user.id, open(ph, 'rb'))


# –í—ã–≤–æ–¥–∏–º –ø—Ä–∏–º–µ—Ä—ã
@dp.message_handler(text="–£—Å–ª–æ–≤–∏—è –∑–∞–∫–∞–∑–∞ –∏ –¥–æ—Å—Ç–∞–≤–∫–∞ üì¶")
async def get_about(message: types.Message):
    await bot.send_photo(message.from_user.id, open('Terms/usl.jpg', 'rb'))
    await bot.send_photo(message.from_user.id, open('Terms/dost.jpg', 'rb'))


# –ó–∞–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–º–∏ –æ–Ω –ø–æ–¥–µ–ª–∏–ª—Å—è —Å –Ω–∞–º–∏ (–∫–æ–Ω—Ç–∞–∫—Ç—ã)
# –ò —Å–æ–æ–±—â–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ –Ω–æ–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ –Ω–∞ –∑–≤–æ–Ω–æ–∫
@dp.message_handler(content_types=['contact'])
async def contact(message: types.Message):
    if message.contact is not None:
        if not checkin_contact(message.contact.user_id):
            execute_contact(message.contact.user_id, message.contact.first_name, '+' + message.contact.phone_number)
            await message.answer("–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ üå∏")

            texts = f"üî• –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–≤–æ–Ω–æ–∫ üî•\nNickname: {message.contact.first_name}" \
                    f"\nName profile: @{message.chat.username}" \
                    f"\nPhone number: +{message.contact.phone_number}"

            await bot.send_message(chat_id=admin_erikk_id, text=texts)
            await bot.send_message(chat_id=admin_daria_id, text=texts)
        else:
            await message.answer("–í—ã —É–∂–µ –æ—Å—Ç–∞–≤–ª—è–ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏–µ —Ä–∞–Ω–µ–µ üå∏\n"
                                 "–î–∞—Ä—å—è –ø–æ–º–Ω–∏—Ç –æ –≤–∞—Å –∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è üå∏")
